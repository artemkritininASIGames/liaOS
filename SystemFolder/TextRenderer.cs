using System;
using Sys = Cosmos.System;
using Cosmos.System.Graphics;
using System.Drawing;
using CMouse = Cosmos.System.MouseManager;
using Point = Cosmos.System.Graphics.Point;

/// <summary>
/// This is the text rendere class. Alphabets have been drawn pixel wise & stored as arrays in this.
/// </summary>
public class TextRenderer
{
    readonly Pen TextPen = new Pen(Color.Black);
    private int jj, ii = 0;

    //Bitmap array for different chracaters.
    int[] a = new int[200] {
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,1,1,1,1,1,1,0,0,
          0,0,1,1,1,1,1,1,1,0,
          0,0,0,0,0,0,0,0,1,1,
          0,0,1,1,1,1,1,1,1,1,
          0,1,1,1,1,1,1,1,1,1,
          1,1,1,0,0,0,0,1,1,1,
          1,1,0,0,0,0,0,0,1,1,
          1,1,0,0,0,0,0,0,1,1,
          1,1,0,0,0,0,0,0,1,1,
          1,1,1,0,0,0,0,1,1,1,
          0,1,1,1,1,1,1,1,1,1,
          0,0,1,1,1,1,1,1,1,1,
          0,0,0,0,0,0,0,0,0,0
          };
    int[] b = new int[200] {
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          1,1,0,0,0,0,0,0,0,0,
          1,1,0,0,0,0,0,0,0,0,
          1,1,0,0,0,0,0,0,0,0,
          1,1,0,0,1,1,1,0,0,0,
          1,1,0,1,1,1,1,1,0,0,
          1,1,1,1,1,0,1,1,1,0,
          1,1,1,1,0,0,0,1,1,1,
          1,1,1,0,0,0,0,0,1,1,
          1,1,1,0,0,0,0,0,1,1,
          1,1,1,0,0,0,0,0,1,1,
          1,1,1,0,0,0,0,0,1,1,
          1,1,1,1,0,0,0,1,1,1,
          1,1,1,1,1,0,1,1,1,0,
          1,1,0,1,1,1,1,1,0,0,
          1,1,0,0,1,1,1,0,0,0,
          0,0,0,0,0,0,0,0,0,0
    };
    int[] c = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };

    internal void StringTextHandler(Canvas c, string v)
    {
        throw new NotImplementedException();
    }

    int[] d = new int[200]
    {
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,1,1,
        0,0,0,1,1,1,0,0,1,1,
        0,0,1,1,1,1,1,0,1,1,
        0,1,1,1,0,1,1,1,1,1,
        1,1,1,0,0,0,1,1,1,1,
        1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,1,1,1,
        1,1,1,0,0,0,1,1,1,1,
        0,1,1,1,0,1,1,1,1,1,
        0,0,1,1,1,1,1,0,1,1,
        0,0,0,1,1,1,0,0,1,1,
        0,0,0,0,0,0,0,0,0,0,
    };
    int[] e = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] f = new int[180]
    {
        0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,1,1,1,1,
        0,0,0,0,1,1,1,1,1,
        0,0,0,0,1,1,0,0,0,
        0,1,1,1,1,1,1,1,1,
        0,1,1,1,1,1,1,1,1,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,0,0,0,0,0,0,
    };
    int[] g = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,1,
        0,0,1,1,1,1,1,1,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] h = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,1,1,1,1,0,0,0,
        1,1,0,1,1,1,1,1,1,0,0,
        1,1,1,1,1,0,0,1,1,1,0,
        1,1,1,1,0,0,0,0,1,1,1,
        1,1,1,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] i = new int[]
    {
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        1,1,1,1,0,0,0,
        1,1,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,1,0,0,
        0,0,1,1,1,0,0,
        0,0,0,1,1,1,0,
        0,0,0,0,1,1,0,
        0,0,0,0,0,0,0,
    };
    int[] j = new int[140]
    {
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,1,1,1,1,
        0,0,0,1,1,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,0,1,1,
        0,0,0,0,1,1,1,
        0,1,1,1,1,1,0,
        0,1,1,1,1,0,0,
        0,0,0,0,0,0,0,

    };

    int[] k = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,1,1,1,0,
        1,1,0,0,0,0,1,1,1,0,0,
        1,1,0,0,0,1,1,1,0,0,0,
        1,1,0,0,1,1,1,0,0,0,0,
        1,1,1,1,1,1,1,1,0,0,0,
        1,1,1,1,0,0,1,1,1,0,0,
        1,1,1,0,0,0,0,1,1,1,0,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] l = new int[40]
    {
        0,0,
        0,0,
        0,0,
        0,0,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        1,1,
        0,0,




    };
    int[] m = new int[200]
    {
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        1,1,0,1,1,1,1,1,0,0,
        1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,1,1,0,1,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        0,0,0,0,0,0,0,0,0,0,
    };
    int[] n = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,1,1,1,1,1,1,0,0,
        1,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] o = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] p = new int[200]
    {
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        1,1,0,1,1,1,1,1,0,0,
        1,1,1,1,1,1,1,1,1,0,
        1,1,1,1,0,0,0,1,1,1,
        1,1,1,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,
        1,1,1,1,0,0,0,1,1,1,
        1,1,1,1,1,1,1,1,1,0,
        1,1,0,1,1,1,1,1,0,0,
        1,1,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,

    };
    int[] q = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,0,1,1,
        0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,0,0,0,0,1,1,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,1,0,0,0,0,1,1,1,1,
        0,1,1,1,1,1,1,1,1,1,1,
        0,0,1,1,1,1,1,0,1,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,

    };
    int[] r = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,1,1,1,1,0,0,0,
        1,1,0,1,1,1,1,1,1,0,0,
        1,1,1,1,1,0,0,0,1,1,0,
        1,1,1,1,0,0,0,0,0,1,0,
        1,1,1,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] s = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,1,0,0,0,0,0,0,1,1,
        0,1,1,1,1,0,0,0,0,0,0,
        0,0,0,1,1,1,0,0,0,0,0,
        0,0,0,0,1,1,1,0,0,0,0,
        0,0,0,0,0,0,1,1,1,1,0,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] t = new int[160]
    {
        0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,1,1,1,1,1,1,0,
        0,1,1,1,1,1,1,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,0,0,0,
        0,0,0,1,1,1,0,0,
        0,0,0,0,1,1,1,0,
        0,0,0,0,0,1,1,0,
        0,0,0,0,0,0,0,0,
    };
    int[] u = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] v = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,0,0,0,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,1,1,1,1,1,0,0,0,
        0,0,0,0,1,1,1,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] w = new int[200]
    {
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,0,0,1,1,0,0,1,1,
        1,1,1,0,1,1,0,1,1,1,
        0,1,1,1,1,1,1,1,1,0,
        0,0,1,1,0,0,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,
    };
    int[] x = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,1,1,0,
        1,1,1,0,0,0,0,1,1,1,0,
        0,1,1,1,0,0,1,1,1,0,0,
        0,0,1,1,1,1,1,1,0,0,0,
        0,0,0,1,1,1,1,0,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,1,1,1,1,0,0,0,0,
        0,0,1,1,1,1,1,1,0,0,0,
        0,1,1,1,0,0,1,1,1,0,0,
        1,1,1,0,0,0,0,1,1,1,0,
        1,1,0,0,0,0,0,0,1,1,0,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] y = new int[220]
    {

        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,1,1,1,1,
        1,1,1,0,0,0,1,1,1,1,1,
        0,1,1,1,1,1,1,1,0,1,1,
        0,0,1,1,1,1,1,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,1,1,1,
        0,0,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] z = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,0,0,0,0,0,1,1,1,
        0,0,0,0,0,0,0,1,1,1,0,
        0,0,0,0,0,0,1,1,1,0,0,
        0,0,0,0,0,1,1,1,0,0,0,
        0,0,0,0,1,1,1,0,0,0,0,
        0,0,0,1,1,1,0,0,0,0,0,
        0,0,1,1,1,0,0,0,0,0,0,
        0,1,1,1,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] space = new int[120]
    {
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
    };
    int[] comma = new int[100]
    {
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,0,1,1,
        0,0,0,1,1,
        0,0,1,1,0,
        0,1,1,0,0,
        0,0,0,0,0,
    };
    int[] fs = new int[40]
    {
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        0,0,
        1,1,
        1,1,
        0,0,

    };
    int[] negation = new int[220]// Currently ~ is used to end text in textbox
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,0,0,0,0,1,
        0,1,1,1,1,1,1,0,1,1,1,
        1,1,1,0,1,1,1,1,1,1,0,
        1,0,0,0,0,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] bs = new int[120]// Currently ` is used as a backspace character in textbox.
    {
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        1,1,1,1,0,0,
        0,1,1,1,1,0,
        0,0,0,0,1,1,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
    };


    int[] A = new int[220] {
      0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,1,0,0,0,0,0,
      0,0,0,1,1,1,1,1,0,0,0,
      0,0,1,1,1,1,1,1,1,0,0,
      0,1,1,1,0,0,0,1,1,1,0,
      1,1,1,0,0,0,0,0,1,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      1,1,1,1,1,1,1,1,1,1,1,
      1,1,1,1,1,1,1,1,1,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      1,1,0,0,0,0,0,0,0,1,1,
      0,0,0,0,0,0,0,0,0,0,0,

      };


    int[] zero = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,1,1,1,1,1,
        1,1,0,0,0,1,1,1,1,1,1,
        1,1,0,0,1,1,1,1,1,1,1,
        1,1,0,1,1,1,1,1,0,1,1,
        1,1,1,1,1,1,1,0,0,1,1,
        1,1,1,1,1,1,0,0,0,1,1,
        1,1,1,1,1,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] one = new int[140]
    {
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,1,1,0,0,0,
        0,1,1,1,0,0,0,
        1,1,1,1,0,0,0,
        1,1,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        0,0,1,1,0,0,0,
        1,1,1,1,1,1,0,
        1,1,1,1,1,1,0,
        0,0,0,0,0,0,0,

    };
    int[] two = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,1,1,1,
        0,0,1,1,1,1,1,1,1,1,0,
        0,1,1,1,1,1,1,1,1,0,0,
        1,1,1,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,0,0,0,0,0,0,0,0,

    };
    int[] three = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,1,1,1,
        0,0,0,0,0,0,1,1,1,1,1,
        0,0,0,0,0,0,1,1,1,1,1,
        0,0,0,0,0,0,0,0,1,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] four = new int[240]
    {
        0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,1,1,0,0,0,
        0,0,0,0,0,0,1,1,1,0,0,0,
        0,0,0,0,0,1,1,1,1,0,0,0,
        0,0,0,0,1,1,1,1,1,0,0,0,
        0,0,0,1,1,1,1,1,1,0,0,0,
        0,0,1,1,1,1,0,1,1,0,0,0,
        0,1,1,1,1,0,0,1,1,0,0,0,
        1,1,1,1,0,0,0,1,1,0,0,0,
        1,1,1,0,0,0,0,1,1,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,0,
        1,1,1,1,1,1,1,1,1,1,1,0,
        0,0,0,0,0,0,0,1,1,0,0,0,
        0,0,0,0,0,0,0,1,1,0,0,0,
        0,0,0,0,0,0,0,1,1,0,0,0,
        0,0,0,0,0,0,0,1,1,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] five = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,0,0,
        1,1,1,1,1,1,1,1,1,1,0,
        0,0,0,0,0,0,0,0,1,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] six = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,0,0,
        1,1,1,1,1,1,1,1,1,1,0,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] seven = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,1,1,1,1,
        0,0,0,0,0,0,1,1,1,1,1,
        0,0,0,0,0,1,1,1,1,1,0,
        0,0,0,0,1,1,1,1,1,0,0,
        0,0,0,0,1,1,1,1,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,0,1,1,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] eight = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    int[] nine = new int[220]
    {
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,1,1,1,1,1,1,1,1,1,0,
        1,1,1,0,0,0,0,0,1,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,0,1,1,
        0,1,1,1,1,1,1,1,1,1,1,
        0,0,1,1,1,1,1,1,1,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        0,0,0,0,0,0,0,0,0,1,1,
        1,1,0,0,0,0,0,0,0,1,1,
        1,1,1,0,0,0,0,0,1,1,1,
        0,1,1,1,1,1,1,1,1,1,0,
        0,0,1,1,1,1,1,1,1,0,0,
        0,0,0,0,0,0,0,0,0,0,0,
    };
    public TextRenderer()
    {

    }
    /// <summary>
    /// Function to detect characters from input string.
    /// </summary>
    /// <param name="C">Canvas Object</param>
    /// <param name="ToPrint">String to be printed.</param>
    /// <param name="CurrentPoint1">Point in Canvas where string has to be printed.</param>
    public Point StringTextHandler(VBECanvas C, string ToPrint, Point CurrentPoint1)

    {
        TextPen.Color = Color.Black;

        for (int ip = 0; ip < ToPrint.Length; ip++)
        {
            char currentChar = ToPrint[ip];
            switch (currentChar)
            {
                case 'a':
                    CurrentPoint1 = PrintAndSpace(a, C, CurrentPoint1);
                    break;
                case 'b':
                    CurrentPoint1 = PrintAndSpace(b, C, CurrentPoint1);
                    break;
                case 'c':
                    CurrentPoint1 = PrintAndSpace(c, C, CurrentPoint1);
                    break;
                case 'd':
                    CurrentPoint1 = PrintAndSpace(d, C, CurrentPoint1);
                    break;
                case 'e':
                    CurrentPoint1 = PrintAndSpace(e, C, CurrentPoint1);
                    break;
                case 'f':
                    CurrentPoint1 = PrintAndSpace(f, C, CurrentPoint1);
                    break;
                case 'g':
                    CurrentPoint1 = PrintAndSpace(g, C, CurrentPoint1);
                    break;
                case 'h':
                    CurrentPoint1 = PrintAndSpace(h, C, CurrentPoint1);
                    break;
                case 'i':
                    CurrentPoint1 = PrintAndSpace(i, C, CurrentPoint1);
                    break;
                case 'j':
                    CurrentPoint1 = PrintAndSpace(j, C, CurrentPoint1);
                    break;
                case 'k':
                    CurrentPoint1 = PrintAndSpace(k, C, CurrentPoint1);
                    break;
                case 'l':
                    CurrentPoint1 = PrintAndSpace(l, C, CurrentPoint1);
                    break;
                case 'm':
                    CurrentPoint1 = PrintAndSpace(m, C, CurrentPoint1);
                    break;
                case 'n':
                    CurrentPoint1 = PrintAndSpace(n, C, CurrentPoint1);
                    break;
                case 'o':
                    CurrentPoint1 = PrintAndSpace(o, C, CurrentPoint1);
                    break;
                case 'p':
                    CurrentPoint1 = PrintAndSpace(p, C, CurrentPoint1);
                    break;
                case 'q':
                    CurrentPoint1 = PrintAndSpace(q, C, CurrentPoint1);
                    break;
                case 'r':
                    CurrentPoint1 = PrintAndSpace(r, C, CurrentPoint1);
                    break;
                case 's':
                    CurrentPoint1 = PrintAndSpace(s, C, CurrentPoint1);
                    break;
                case 't':
                    CurrentPoint1 = PrintAndSpace(t, C, CurrentPoint1);
                    break;
                case 'u':
                    CurrentPoint1 = PrintAndSpace(u, C, CurrentPoint1);
                    break;
                case 'v':
                    CurrentPoint1 = PrintAndSpace(v, C, CurrentPoint1);
                    break;
                case 'w':
                    CurrentPoint1 = PrintAndSpace(w, C, CurrentPoint1);
                    break;
                case 'x':
                    CurrentPoint1 = PrintAndSpace(x, C, CurrentPoint1);
                    break;
                case 'y':
                    CurrentPoint1 = PrintAndSpace(y, C, CurrentPoint1);
                    break;
                case 'z':
                    CurrentPoint1 = PrintAndSpace(z, C, CurrentPoint1);
                    break;



                case ' ':
                    CurrentPoint1 = PrintAndSpace(space, C, CurrentPoint1);
                    break;
                case ',':
                    CurrentPoint1 = PrintAndSpace(comma, C, CurrentPoint1);
                    break;
                case '.':
                    CurrentPoint1 = PrintAndSpace(fs, C, CurrentPoint1);
                    break;
                case '~':
                    CurrentPoint1 = PrintAndSpace(negation, C, CurrentPoint1);
                    break;
                case '`':
                    CurrentPoint1 = PrintAndSpace(bs, C, CurrentPoint1);
                    break;


                case 'A':
                    CurrentPoint1 = PrintAndSpace(A, C, CurrentPoint1);
                    break;

                case '0':
                    CurrentPoint1 = PrintAndSpace(zero, C, CurrentPoint1);
                    break;
                case '1':
                    CurrentPoint1 = PrintAndSpace(one, C, CurrentPoint1);
                    break;
                case '2':
                    CurrentPoint1 = PrintAndSpace(two, C, CurrentPoint1);
                    break;
                case '3':
                    CurrentPoint1 = PrintAndSpace(three, C, CurrentPoint1);
                    break;
                case '4':
                    CurrentPoint1 = PrintAndSpace(four, C, CurrentPoint1);
                    break;
                case '5':
                    CurrentPoint1 = PrintAndSpace(five, C, CurrentPoint1);
                    break;
                case '6':
                    CurrentPoint1 = PrintAndSpace(six, C, CurrentPoint1);
                    break;
                case '7':
                    CurrentPoint1 = PrintAndSpace(seven, C, CurrentPoint1);
                    break;
                case '8':
                    CurrentPoint1 = PrintAndSpace(eight, C, CurrentPoint1);
                    break;
                case '9':
                    CurrentPoint1 = PrintAndSpace(nine, C, CurrentPoint1);
                    break;



            }
        }
        return CurrentPoint1;
    }

    /// <summary>
    /// Function to detect the character from input character.
    /// </summary>
    /// <param name="C">Canvas Parameter.</param>
    /// <param name="ToPrint">String to be printed.</param>
    /// <param name="CurrentPoint1">Point in canvas where text is to be printed.</param>
    public Point CharTextHandler(VBECanvas C, char currentChar, Point CurrentPoint1)
    {
        TextPen.Color = Color.Black;



        switch (currentChar)
        {
            case 'a':
                CurrentPoint1 = PrintAndSpace(a, C, CurrentPoint1);
                break;
            case 'b':
                CurrentPoint1 = PrintAndSpace(b, C, CurrentPoint1);
                break;
            case 'c':
                CurrentPoint1 = PrintAndSpace(c, C, CurrentPoint1);
                break;
            case 'd':
                CurrentPoint1 = PrintAndSpace(d, C, CurrentPoint1);
                break;
            case 'e':
                CurrentPoint1 = PrintAndSpace(e, C, CurrentPoint1);
                break;
            case 'f':
                CurrentPoint1 = PrintAndSpace(f, C, CurrentPoint1);
                break;
            case 'g':
                CurrentPoint1 = PrintAndSpace(g, C, CurrentPoint1);
                break;
            case 'h':
                CurrentPoint1 = PrintAndSpace(h, C, CurrentPoint1);
                break;
            case 'i':
                CurrentPoint1 = PrintAndSpace(i, C, CurrentPoint1);
                break;
            case 'j':
                CurrentPoint1 = PrintAndSpace(j, C, CurrentPoint1);
                break;
            case 'k':
                CurrentPoint1 = PrintAndSpace(k, C, CurrentPoint1);
                break;
            case 'l':
                CurrentPoint1 = PrintAndSpace(l, C, CurrentPoint1);
                break;
            case 'm':
                CurrentPoint1 = PrintAndSpace(m, C, CurrentPoint1);
                break;
            case 'n':
                CurrentPoint1 = PrintAndSpace(n, C, CurrentPoint1);
                break;
            case 'o':
                CurrentPoint1 = PrintAndSpace(o, C, CurrentPoint1);
                break;
            case 'p':
                CurrentPoint1 = PrintAndSpace(p, C, CurrentPoint1);
                break;
            case 'q':
                CurrentPoint1 = PrintAndSpace(q, C, CurrentPoint1);
                break;
            case 'r':
                CurrentPoint1 = PrintAndSpace(r, C, CurrentPoint1);
                break;
            case 's':
                CurrentPoint1 = PrintAndSpace(s, C, CurrentPoint1);
                break;
            case 't':
                CurrentPoint1 = PrintAndSpace(t, C, CurrentPoint1);
                break;
            case 'u':
                CurrentPoint1 = PrintAndSpace(u, C, CurrentPoint1);
                break;
            case 'v':
                CurrentPoint1 = PrintAndSpace(v, C, CurrentPoint1);
                break;
            case 'w':
                CurrentPoint1 = PrintAndSpace(w, C, CurrentPoint1);
                break;
            case 'x':
                CurrentPoint1 = PrintAndSpace(x, C, CurrentPoint1);
                break;
            case 'y':
                CurrentPoint1 = PrintAndSpace(y, C, CurrentPoint1);
                break;
            case 'z':
                CurrentPoint1 = PrintAndSpace(z, C, CurrentPoint1);
                break;



            case ' ':
                CurrentPoint1 = PrintAndSpace(space, C, CurrentPoint1);
                break;
            case ',':
                CurrentPoint1 = PrintAndSpace(comma, C, CurrentPoint1);
                break;
            case '.':
                CurrentPoint1 = PrintAndSpace(fs, C, CurrentPoint1);
                break;
            case '~':
                CurrentPoint1 = PrintAndSpace(negation, C, CurrentPoint1);
                break;
            case '`':
                CurrentPoint1 = PrintAndSpace(bs, C, CurrentPoint1);
                break;


            case 'A':
                CurrentPoint1 = PrintAndSpace(A, C, CurrentPoint1);
                break;

            case '0':
                CurrentPoint1 = PrintAndSpace(zero, C, CurrentPoint1);
                break;
            case '1':
                CurrentPoint1 = PrintAndSpace(one, C, CurrentPoint1);
                break;
            case '2':
                CurrentPoint1 = PrintAndSpace(two, C, CurrentPoint1);
                break;
            case '3':
                CurrentPoint1 = PrintAndSpace(three, C, CurrentPoint1);
                break;
            case '4':
                CurrentPoint1 = PrintAndSpace(four, C, CurrentPoint1);
                break;
            case '5':
                CurrentPoint1 = PrintAndSpace(five, C, CurrentPoint1);
                break;
            case '6':
                CurrentPoint1 = PrintAndSpace(six, C, CurrentPoint1);
                break;
            case '7':
                CurrentPoint1 = PrintAndSpace(seven, C, CurrentPoint1);
                break;
            case '8':
                CurrentPoint1 = PrintAndSpace(eight, C, CurrentPoint1);
                break;
            case '9':
                CurrentPoint1 = PrintAndSpace(nine, C, CurrentPoint1);
                break;


        }
        return (CurrentPoint1);

    }
    /// <summary>
    /// Function to print characters on GUI and put required spacing between each characters.
    /// It is not advisable to use this function directly. Use StringTextHandler or CharTextHandler instead.
    /// </summary>
    /// <param name="c">Bitmap array of the character to be printed.</param>
    /// <param name="C">Canvas Parameter.</param>
    /// <param name="CurrentPoint">Current Pointer of Text.</param>
    /// <returns></returns>
    private Point PrintAndSpace(int[] c, VBECanvas vbe, Point CurrentPoint)
    {


        for (ii = 0; ii < 20; ii++)
        {
            for (jj = 0; jj < (c.Length) / 20; jj++)
            {
                if (c[((c.Length) / 20) * ii + jj] == 1)
                {
                    vbe.DrawPoint(TextPen, CurrentPoint.X + jj, CurrentPoint.Y + ii);
                }
            }
        }


        CurrentPoint.X = CurrentPoint.X + jj;

        if (750 - CurrentPoint.X >= 16)
        {
            CurrentPoint.X = CurrentPoint.X + 1;

        }
        else
        {
            CurrentPoint.X = 16;
            CurrentPoint.Y = CurrentPoint.Y + 23;

        }



        return (CurrentPoint);

    }



}